# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        # create an empty stack
        stack = []
        # initialize depth to 0
        depth = 0
        
        if root is not None:
            # initialize current_depth and root
            stack.append((1, root))
        
        while stack != []:
            # pop the last element of stack
            current_depth, root = stack.pop()
            if root is not None:
                # current node.right is none, depth stop being calculated 
                depth = max(depth, current_depth)
                # judge if root.left or right is none
                stack.append((current_depth + 1, root.left))
                stack.append((current_depth + 1, root.right))
        
        return depth
