class Solution:
    def shortestBridge(self, grid: List[List[int]]) -> int:
        row = len(grid)
        col = len(grid[0])
        q = collections.deque(())
        visited = set(())
        
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1 and (i, j) not in visited:
                    q.append((i, j))
                    visited.add((i, j))
                    
                    while q:
                        r, c = q.popleft()
                        for nbr, nbc in ((r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)):
                            if (
                                nbr in range(row) and nbc in range(col) and
                                grid[nbr][nbc] == 1 and
                                (nbr, nbc) not in visited
                                ):
                                q.append((nbr, nbc))
                                visited.add((nbr, nbc))

        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1 and (i, j) not in visited:
                    q.append((i, j))
                    visited.add((i, j))
                    
                    while q:
                        r, c = q.pop()
                        dfs(r, c)
                    
                    
                    q = collections.deque(visited)
                    distance = 0
                    
                    while q:
                        for _ in range(len(q)):
                            cur_r, cur_c = q.popleft()
                            
                            if grid[cur_r][cur_c] == 1 and distance > 0:
                                return distance - 1
                            
                            for nb_cur_r, nb_cur_c in (
                                                        (cur_r + 1, cur_c),
                                                        (cur_r - 1, cur_c),
                                                        (cur_r, cur_c + 1),
                                                        (cur_r, cur_c - 1)
                                                        ):
                                if (
                                    nb_cur_r in range(row) and
                                    nb_cur_c in range(col) and
                                    (nb_cur_r, nb_cur_c) not in visited
                                    ):
                                    q.append((nb_cur_r, nb_cur_c))
                                    visited.add((nb_cur_r, nb_cur_c))
                        distance += 1
