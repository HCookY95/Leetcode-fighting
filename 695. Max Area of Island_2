class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        visited = set(())
        queue = collections.deque(())
        
        def bfs(i, j):
            area = 0
            visited.add((i, j))
            queue.append((i, j))
            while queue:
                x, y = queue.popleft()
                area += 1
                direction = ((1, 0), (-1, 0), (0, 1), (0, -1))
                for delta_x, delta_y in direction:
                    if (
                        x + delta_x not in range(len(grid)) or 
                        y + delta_y not in range(len(grid[0])) or
                        (x + delta_x, y + delta_y) in visited or
                        grid[x + delta_x][y + delta_y] != 1
                        ):
                        continue
                    visited.add((x + delta_x, y + delta_y))
                    queue.append(((x + delta_x, y + delta_y)))
            return area
        
        area = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1 and (i, j) not in visited:
                    area = max(bfs(i, j), area)
        return area
