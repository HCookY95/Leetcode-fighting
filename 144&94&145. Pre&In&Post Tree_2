###################################### Preorder #######################################
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        stack = [root]
        
        while stack:
            node = stack.pop()
            
            if not node:
                continue
            
            res.append(node.val)
            
            stack.append(node.right)
            stack.append(node.left)
        
        return res
###################################### Inorder #######################################
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        stack = []
        
        curr = root
        
        while curr or stack:
            while curr:
                stack.append(curr)
                curr = curr.left
            
            curr = stack.pop()
            res.append(curr.val)
            curr = curr.right

        return res
        
###################################### Post-order #######################################
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = collections.deque([])
        stack = [root]
        
        while stack:
            node = stack.pop()
            
            if not node:
                continue
            
            res.appendleft(node.val)
            
            stack.append(node.left)
            stack.append(node.right)
            
        return res
