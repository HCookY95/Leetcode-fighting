class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        row = len(board)
        col = len(board[0])
        
        def bfs(r, c):
            q = collections.deque(())
            visited = set(())
            
            if board[r][c] == 'O':
                board[r][c] = 'E'
                q.append((r, c))
                visited.add((r, c))
            
                while q:
                    i, j = q.popleft()

                    for nbi, nbj in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):
                        if (
                            nbi in range(row) and nbj in range(col) and
                            board[nbi][nbj] == 'O' and 
                            board[nbi][nbj] not in visited
                            ):
                            board[nbi][nbj] = 'E'
                            q.append((nbi, nbj))
                            visited.add((nbi, nbj))
                        
        for i in range(row):
            bfs(i, 0)
            bfs(i, col - 1)
        
        for j in range(col):
            bfs(0, j)
            bfs(row - 1, j)
            
        for i in range(row):
            for j in range(col):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                if board[i][j] == 'E':
                    board[i][j] = 'O'
